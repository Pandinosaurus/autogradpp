CMAKE_MINIMUM_REQUIRED(VERSION 3.0 FATAL_ERROR)
CMAKE_POLICY(VERSION 3.0)

SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_POSITION_INDEPENDENT_CODE ON)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake" "${CMAKE_SOURCE_DIR}/cmake/FindCUDA")

### This library exports: 
ADD_LIBRARY(autogradpp STATIC 
  src/detail.cpp
  src/containers.cpp
  src/optimizers.cpp
)

## Build subdirectories
ADD_SUBDIRECTORY(tests)

### ATen
FIND_PATH(ATEN_INCLUDE_DIR ATen/ATen.h PATHS "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/torch/lib/include/" NO_DEFAULT_PATH)
FIND_LIBRARY(ATEN_LIBRARY ATen PATHS "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/torch/lib" NO_DEFAULT_PATH)

INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(ATEN DEFAULT_MSG ATEN_LIBRARY ATEN_INCLUDE_DIR)
MARK_AS_ADVANCED(ATEN_INCLUDE_DIR ATEN_LIBRARY)

SET(ATEN_INCLUDE_DIRS ${ATEN_INCLUDE_DIR})
SET(ATEN_LIBRARIES ${ATEN_LIBRARY})

ADD_LIBRARY(ATen SHARED IMPORTED)
SET_TARGET_PROPERTIES(ATen PROPERTIES
  IMPORTED_LOCATION ${ATEN_LIBRARY}
  INTERFACE_INCLUDE_DIRECTORIES ${ATEN_INCLUDE_DIR})

### Python Headers for pytorch
FIND_PACKAGE(PythonLibs REQUIRED)
TARGET_INCLUDE_DIRECTORIES(autogradpp 
  PUBLIC 
    ${PYTHON_INCLUDE_DIRS} 
    "${CMAKE_CURRENT_SOURCE_DIR}"
    "${CMAKE_CURRENT_SOURCE_DIR}/include"
    "${CMAKE_CURRENT_SOURCE_DIR}/pytorch"
  PRIVATE
    "${CMAKE_CURRENT_SOURCE_DIR}/include/autogradpp"
)

### Copy over all the relevant .so files
ADD_CUSTOM_COMMAND(
  TARGET autogradpp PRE_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/build/lib*/torch/_C*.so" "${CMAKE_BINARY_DIR}/libpythpp.so"
)
ADD_CUSTOM_COMMAND(
  TARGET autogradpp PRE_BUILD
  COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/lib"
)
ADD_CUSTOM_COMMAND(
  TARGET autogradpp PRE_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/build/lib*/torch/lib/libshm.*" "${CMAKE_BINARY_DIR}/lib"
)
ADD_CUSTOM_COMMAND(
  TARGET autogradpp PRE_BUILD
  COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/build/lib*/torch/lib/libgloo*" "${CMAKE_BINARY_DIR}/lib"
)
ADD_LIBRARY(libpythpp SHARED IMPORTED)
SET_TARGET_PROPERTIES(libpythpp PROPERTIES IMPORTED_NO_SONAME 1
  IMPORTED_LOCATION "${CMAKE_BINARY_DIR}/libpythpp.so")

ADD_LIBRARY(libgloo SHARED IMPORTED)
SET_TARGET_PROPERTIES(libgloo PROPERTIES IMPORTED_NO_SONAME 1
  IMPORTED_LOCATION "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/torch/lib/libgloo.so")


IF(APPLE)
  # Set RPATHs for OSX...
  ADD_CUSTOM_COMMAND(
    TARGET autogradpp PRE_BUILD
    COMMAND install_name_tool -id "@rpath/libpythpp.so" -add_rpath "${CMAKE_BINARY_DIR}" "${CMAKE_BINARY_DIR}/libpythpp.so"
  )
  # Unfortunately this won't be picked up in the initial build...
  SET_TARGET_PROPERTIES(libpythpp PROPERTIES
    INTERFACE_LINK_LIBRARIES "-Wl,-rpath ${CMAKE_BINARY_DIR}")
ENDIF(APPLE)

### Link stuff
TARGET_LINK_LIBRARIES(autogradpp ATen libpythpp libgloo ${PYTHON_LIBRARIES})

### Optionally, link CUDA
FIND_PACKAGE(CUDA)
IF(CUDA_FOUND)
  TARGET_INCLUDE_DIRECTORIES(autogradpp PUBLIC ${CUDA_TOOLKIT_INCLUDE})
  ADD_LIBRARY(libpythpp_nvrtc SHARED IMPORTED)
  SET_TARGET_PROPERTIES(libpythpp_nvrtc PROPERTIES IMPORTED_NO_SONAME 1
    IMPORTED_LOCATION "${CMAKE_BINARY_DIR}/libpythpp_nvrtc.so")

  ADD_CUSTOM_COMMAND(
    TARGET autogradpp PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_CURRENT_SOURCE_DIR}/pytorch/build/lib*/torch/_nvrtc*.so" "${CMAKE_BINARY_DIR}/libpythpp_nvrtc.so"
  )
  IF(APPLE)
    ADD_CUSTOM_COMMAND(
      TARGET autogradpp PRE_BUILD
      COMMAND install_name_tool -id "@rpath/libpythpp_nvrtc.so" -add_rpath "${CMAKE_BINARY_DIR}" "${CMAKE_BINARY_DIR}/libpythpp_nvrtc.so"
    )
  ENDIF(APPLE)
  TARGET_LINK_LIBRARIES(autogradpp libpythpp_nvrtc
    -L${CUDA_TOOLKIT_ROOT_DIR}/lib64 cuda nvrtc
   )
ENDIF(CUDA_FOUND)
